
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://lxiqvvourradjjhocxrd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx4aXF2dm91cnJhZGpqaG9jeHJkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUwMjMwMjEsImV4cCI6MjA2MDU5OTAyMX0.-pk6ZtNudMtA0KkhM7IFJVE9UYjD9ldq_Ci6YiO9uqM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Helper function to sanitize UUIDs
export const sanitizeUuid = (uuid: string): string => {
  return uuid.trim().replace(/[^\w-]/g, '');
};

// Helper function to log errors with standard format
export const logSupabaseError = (operation: string, error: any): void => {
  console.error(`Supabase ${operation} error:`, error);
};

// Fetch projects with retries for improved reliability
export const fetchProjectsWithRetry = async (userId: string, maxRetries = 3) => {
  let retries = 0;
  
  while (retries < maxRetries) {
    try {
      const { data, error } = await supabase
        .from('projects')
        .select('*')
        .eq('user_id', userId);

      if (error) throw error;
      
      return { data, error: null };
    } catch (error) {
      console.error(`Error fetching projects (attempt ${retries + 1}/${maxRetries}):`, error);
      retries++;
      
      if (retries >= maxRetries) {
        return { data: null, error };
      }
      
      // Add exponential backoff
      await new Promise(resolve => setTimeout(resolve, 500 * Math.pow(2, retries)));
    }
  }
  
  return { data: null, error: new Error('Max retries reached') };
};
